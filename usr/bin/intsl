#!/usr/bin/env bash
#export PATH="$(pwd):$PATH"
#/をつける
#--------------------------------<<外部ファイル読み込み>>--------------------------------#
#ディレクトリー設定
. etc/intsl_v/directory
#設定ファイル
. ${SETTING_FILE_LOCATIONS}settings
#変数ファイル
. ${VARIABLE_FILE_LOCATIONS}variable
#言語ファイル
. ${LANGUAGE_FILE_LOCATIONS}${setting_use_lang}
#----------------------------------------------------------------------------------------#
SELF_DIR_PATH=$(
    cd $(dirname $0)
    pwd
)/
#TODO: packageにする際にファイルの先頭に/をつける (yupix 2020:4/9)
#Official
SERVER_JARLIST_PATH="./minecraft/versionlist/official/"
#Paper
SERVER_PAPERLIST_PATH="./minecraft/versionlist/paper/"
#Spigot
SERVER_SPIGOTLIST_PATH="./minecraft/versionlist/spigot/"

#その他使用ファイルの存在確認
if [ ! -e "var/cache/intsl_v/minecraft_jar/official" -o ! -e "var/cache/intsl_v/minecraft_jar/spigot" -o ! -e "var/cache/intsl_v/minecraft_jar/paper" -o ! -e "var/cache/intsl_v/minecraft_jar/forge" -o ! -e "usr/lib/intsl_v/" -o ! -e "usr/share/doc/intsl_v/" -o ! -e "usr/share/intsl_v/locale" -o ! -e "etc/intsl_v/" ]; then
    echo "intslを使用する上で必要なファイルが不足しています。"
    echo "不足しているファイルを作成する為、sudoのパスワードを入力してください。"
    sudo mkdir -p var/cache/intsl_v/minecraft_jar/official var/cache/intsl_v/minecraft_jar/spigot var/cache/intsl_v/minecraft_jar/paper var/cache/intsl_v/minecraft_jar/forge \
        usr/lib/intsl_v/ usr/share/doc/intsl_v/ usr/share/intsl_v/locale etc/intsl_v/
fi

#基本システムファイルの存在確認
if [ ! -e "etc/intsl_v/settings" -o ! -e "etc/intsl_v/variable" -o ! -e "usr/share/intsl_v/locale/" ]; then
    echo "システムファイルが破損している、又は存在しない為、起動に失敗しました。"
    echo "復元を試みますか?"
    echo "Coming Soon..."
fi

#オプション取得
get_optision=$(echo $@ | grep -o "\-f")

#コマンド
first_start() {
    if [[ ${get_optision} != "-f" ]]; then
        #/をつける
        if [[ ${setting_package_mode} = "true" ]]; then
            local max_settings="2"
        else
            local max_settings="3"
        fi
        if [ ! -e var/dummy ]; then
            echo "INTSLをインストールして頂きありがとうございます。"
            echo "本Projectのご利用をスムーズにスタートする為に初期設定をする事を推奨します！"
            while :; do
                read -p ">" set_preferences
                case $set_preferences in
                [yY] | [yY][eE][sS])
                    local count="1"
                    while [[ ${count} -le ${max_settings} ]]; do
                        local setting_text1="使用する言語を選択してください (${count} / ${max_settings})"
                        if [[ ${setting_package_mode} = "false" ]]; then
                            local setting_text2="使用するたびにバージョンアップを確認するか (${count} / ${max_settings})"
                            local setting_text3="(SpigotのBuild時,前回の環境をリセットするかどうか (${count} / ${max_settings})"
                        else
                            local setting_text2="(SpigotのBuild時,前回の環境をリセットするかどうか (${count} / ${max_settings})"
                        fi
                        local change_setting="${count}"
                        local overwrite="setting_text"
                        eval $overwrite="\$setting_text$count"
                        if [[ ${change_setting} = 1 ]]; then
                            echo "${setting_text}"
                            echo "${message_available_languages}"
                            while :; do
                                read -p ">" input_data
                                input_data=${input_data:-ja}
                                case ${input_data} in
                                ja)
                                    local run_sed_command="$(sed -i -e 's/setting_use_lang="'${setting_use_lang}'"/setting_use_lang="'${input_data}'"/' etc/intsl_v/settings)"
                                    break
                                    ;;
                                en)
                                    echo "ComingSoon..."
                                    local input_data="ja"
                                    local run_sed_command="$(sed -i -e 's/setting_use_lang="'${setting_use_lang}'"/setting_use_lang="'${input_data}'"/' etc/intsl_v/settings)"
                                    break
                                    ;;
                                *)
                                    echo "${message_nonexistent_language}"
                                    ;;
                                esac
                            done
                        else
                            echo "${setting_text}"
                            echo "${message_use_possible}"
                            read -p ">" input_data
                            input_data=${input_data:-true}
                            while :; do
                                if [ ${input_data,,} = true -o ${input_data,,} = yes -o ${input_data,,} = y ]; then
                                    local input_data="true"
                                    break
                                elif [ ${input_data,,} = false -o ${input_data,,} = no -o ${input_data,,} = n ]; then
                                    local input_data="false"
                                    break
                                else
                                    echo "(Y)es または (N)o を入力してください。"
                                fi
                            done
                            run_sed_command2="sed -i -e 's/setting_version_check=\"${setting_version_check}\"/setting_version_check=\"${input_data}\"/' etc/intsl_v/settings"
                            run_sed_command3="sed -i -e 's/setting_resetspigot=\"${setting_resetspigot}\"/setting_resetspigot=\"${input_data}\"/' etc/intsl_v/settings"
                            local overwrite="run_sed_command"
                            eval $overwrite="\$run_sed_command${count}"
                            eval ${run_sed_command}
                        fi
                        local count=$((${count} + 1))
                    done
                    touch var/dummy
                    echo "これで初回設定は終了です！"
                    echo "それでは良いINTSL V ライフを！"
                    echo "3秒後に元の動作に自動で戻ります..."
                    sleep 3
                    break
                    ;;
                [nN] | [nN][oO])
                    touch var/dummy
                    echo "初回設定をキャンセルしました。"
                    echo "設定はいつでも mainコマンドで変更可能です!"
                    echo "3秒後に元の動作に自動で戻ります..."
                    sleep 3
                    break
                    ;;
                *)
                    echo "(Y)es または (N)oを入力してください"
                    ;;
                esac
            done
        fi
    fi
}

SPINNER() {
    for ((i = 0; i < ${#chars}; i++)); do
        sleep 0.05
        echo -en "${chars:$i:1} ${spinner_progress_status} " "\r"
    done
}

serverlistoutput() {
    echo "サーバーリストをアウトプットします。"
    while :; do
        if [[ -e OUTPUTSERVERLIST.txt ]]; then
            rm -rf OUTPUTSERVERLIST.txt
        else
            while [[ ! -e OUTPUTSERVERLIST.txt ]]; do
                spinner_progress_status="${first_start}"
                cat ./lib/main/server_list.sh | awk '/STARTSERVERLIST/,/ENDSERVERLIST/' >OUTPUTSERVERLIST.txt
                sed -i -e '1,1d' OUTPUTSERVERLIST.txt
                #先頭削除
                sed -i -e '$d' OUTPUTSERVERLIST.txt
                #最終行削除
                sed -i -e '1d' OUTPUTSERVERLIST.txt
                #空白削除
                sed -i '/^$/d' OUTPUTSERVERLIST.txt
            done
            break
        fi
    done
    echo "${message_output_success}"
}

#INTSLGETV() {
#    VERSIONGET=$(echo "$INTVERSIONBODY" | sed -e 's/\(.\{1\}\)/.\1/g')
#}

vcheck() {
    while :; do
        if [[ -e ${TMP_FILE_LOCATIONS}new-version.txt ]]; then
            spinner_progress_status="キャッシュの削除中"
            SPINNER
            rm -rf ${TMP_FILE_LOCATIONS}new-version.txt
        else
            spinner_progress_status="最新バージョンの確認中"
            wget -q ${INTREPOURL}pub/intsl_v/new-version.txt -P ${TMP_FILE_LOCATIONS}
            if [[ -e ${TMP_FILE_LOCATIONS}new-version.txt ]]; then
                . ${TMP_FILE_LOCATIONS}new-version.txt
                regular_version=$(echo "$NEWVERSION" | sed -e 's/\(.\)/\1./'g | sed -e 's/.$//')
                if [[ $NEWVERSION -gt ${INTVESION} ]]; then
                    echo "$message_update_exists            "
                    echo -e "${ECHO_RED_COLOR}Current: INTSL-${INTVESION}${ECHO_COLOR_EXIT} ->  ${ECHO_GREEN_COLOR}New: INTSL-${regular_version}${ECHO_COLOR_EXIT}"
                    echo "${message_downalod_file}"
                    echo "${message_use_possible}"
                    read -p ">" input_data
                    input_data=${input_data:-y}
                    case ${input_data} in
                    [yY]|[yY][eE][sS])
                        echo "$message_updata_start"
                        exit
                        while [[ ! -e ./INTSL-${regular_version}-${INTEDITION}.zip ]]; do
                            spinner_progress_status="$DATA_DOWNLOAD_NOW_ME"
                            SPINNER
                            wget -q https://repo.akarinext.org/pub/intsl-v/${regular_version}/INTSL-${regular_version}-${INTEDITION}.zip -P ${TMP_FILE_LOCATIONS}
                        done
                        echo "${message_download_success}"
                        serverlistoutput
                        unzip -qonu ./INTSL-${regular_version}-${INTEDITION}.zip
                        if [[ -e INTSL-${regular_version}-${INTEDITION} ]]; then
                            cd ./INTSL-${regular_version}-${INTEDITION}
                            sudo cp -r . ../
                            cd -
                        else
                            echo -e "${ECHO_RED_COLOR}ERROR:${ECHO_COLOR_EXIT} ファイルの解凍に失敗しました"
                            echo "Systemを保護するためにサービスを終了します。"
                            break
                        fi
                        . ./assets/variable.txt
                        if [[ ${regular_version} -gt ${INTVERSION} ]]; then
                            echo "バージョンアップに失敗"
                        else
                            rm -rf news.txt
                            wget -q ${INTREPOURL}pub/intsl/news.txt
                            MAXLINE=$(cat news.txt | wc -l)
                            while [[ $COUNT != $MAXLINE ]]; do
                                . ./assets/settings.txt
                                spinner_progress_status="最新情報の取得中 $COUNT / $MAXLINE"
                                SPINNER
                                COUNT=$(($COUNT + 1))
                                GETLINE=$(sed -n ${COUNT}P news.txt)
                                echo "$GETLINE"
                            done
                            echo "$message_updata_success"

                        fi
                        ;;
                    [nN]|[nN][oO])
                        echo "キャンセルしました。"
                        ;;
                    esac
                    echo $name
                    break
                else
                    echo -e '現在のINTSL Vは\e[1;37;32m最新バージョン\e[0mで実行中です '
                    break
                fi
            else
                echo "$message_download_failed"
                break
            fi
        fi
    done
}

DONWLOAD_CANCELLATION() {
    echo "ダウンロードをキャンセルしたため、サービスを終了します"
    break
    exit 0
}

mc_server_create() {
    . usr/lib/intsl_v/server_create
}
extension_import() {
    rm -rf ${INPUT_EXTENSION_NAME}.txt
    if [[ -e ${INPUT_EXTENSION_NAME}.sh ]]; then
        #拡張機能系だけを保存するよう
        GETIEXT=$(cat ./${INPUT_EXTENSION_NAME}.sh | grep -e IEXT -e INT -e VURL >>./${INPUT_EXTENSION_NAME}.txt)
        MAXLINE=$(cat ${INPUT_EXTENSION_NAME}.txt | wc -l)
        echo "$MAXLINE"
        while [[ $COUNT != $MAXLINE ]]; do
            . ./assets/settings.txt
            COUNT=$(($COUNT + 1))
            spinner_progress_status="進捗 $COUNT / $MAXLINE"
            SPINNER
            GETLINE=$(sed -n ${COUNT}P ${INPUT_EXTENSION_NAME}.txt)
            sed -i ''$EXSTENSIONLANE'i '"$GETLINE"'' ./assets/extension.txt
            #新しいラインの数値作成
            NEWSERVERLANE=$((EXSTENSIONLANE + 1))
            #拡張機能の追加ライン
            sed -i -e 's/EXSTENSIONLANE="'$EXSTENSIONLANE'"/EXSTENSIONLANE="'$NEWSERVERLANE'"/' ./assets/settings.txt
        done
        if [[ ! -e ./lib/extensions ]]; then
            mkdir ./lib/extensions
        fi
        MAXLINE=$(cat ${INPUT_EXTENSION_NAME}.sh | wc -l)
        mv ./${INPUT_EXTENSION_NAME}.sh ./lib/extensions/
        sed -i ''$EXTADDLINE'i'\#${INPUT_EXTENSION_NAME}START'' ./lib/main/extension_manager.sh
        COUNTADD=$((EXTADDLINE + 1))
        sed -i -e 's/EXTADDLINE="'$EXTADDLINE'"/EXTADDLINE="'$COUNTADD'"/' ./assets/settings.txt
        . ./assets/settings.txt
        sed -i ''$EXTADDLINE'i'${INPUT_EXTENSION_NAME}\)'' ./lib/main/extension_manager.sh
        sed -i ''$EXTADDLINE'a ;;' ./lib/main/extension_manager.sh
        sed -i ''$EXTADDLINE'a . ./lib/extensions/'${INPUT_EXTENSION_NAME}.sh'' ./lib/main/extension_manager.sh
        COUNTADD=$((EXTADDLINE + 3))
        sed -i -e 's/EXTADDLINE="'$EXTADDLINE'"/EXTADDLINE="'$COUNTADD'"/' ./assets/settings.txt
        . ./assets/settings.txt
        sed -i ''$EXTADDLINE'i'\#${INPUT_EXTENSION_NAME}STOP'' ./lib/main/extension_manager.sh
        COUNTADD=$((EXTADDLINE + 1))
        sed -i -e 's/EXTADDLINE="'$EXTADDLINE'"/EXTADDLINE="'$COUNTADD'"/' ./assets/settings.txt
        #ライン追加のライン数を変更
        . ./assets/extension.txt
        NEWEXTENSIONS=$((EXTENSIONS + 1))
        #エクステンションの数追加
        sed -i -e 's/EXTENSIONS="'$EXTENSIONS'"/EXTENSIONS="'$NEWEXTENSIONS'"/' ./assets/extension.txt
        . ./assets/extension.txt
        sed -i -e "s/IEXT/IE_XT$EXTENSIONS/g" ./assets/extension.txt
        sed -i -e "s/INTEXT/INT_EXT$EXTENSIONS/g" ./assets/extension.txt
        sed -i -e "s/VURL/V_URL$EXTENSIONS/g" ./assets/extension.txt
        sed -i -e "s/EXDOWNLOAD/EX_DOWNLOAD$EXTENSIONS/g" ./assets/extension.txt
        . ./assets/settings.txt
        EXT_MD5=$(echo "$INPUT_EXTENSION_NAME" | md5sum | sed -e "s/-//g")
        sed -i ''$EXSTENSIONLANE'i '"EXTMD5=\"$EXT_MD5\""'' ./assets/extension.txt
        sed -i -e "s/EXTMD5/EXT_MD5$EXTENSIONS/g" ./assets/extension.txt
        #新しいラインの数値作成
        NEWSERVERLANE=$((EXSTENSIONLANE + 1))
        #拡張機能の追加ライン
        sed -i -e 's/EXSTENSIONLANE="'$EXSTENSIONLANE'"/EXSTENSIONLANE="'$NEWSERVERLANE'"/' ./assets/settings.txt
        echo "shが存在します。"
    else
        echo "shが存在しません"
    fi
}
DEV_HELP_MESSAGE() {
    echo "使用方法: linux.sh main dev [args...] "
    echo "■ 1.自分の名前を決める        ■ 4.開発者ログイン時のパスワードを変更する"
    echo "■ 2.呼ぶさいの敬称を決める    ■ 5.依存関係の自動構築[α](お試し版]を使う"
    echo "■ 3.新型起動方法を実行する    ■ 6.Coming Soon..."
}
DEV_CONTENT() {
    if [ -z "$dev" ]; then
        read -p ">" dev
    elif [[ $dev = "-f" ]]; then
        read -p ">" dev
    fi
    case "$dev" in
    "--help")
        DEV_HELP_MESSAGE
        ;;
    [1])
        echo "呼んでほしい名前を入力してください。"
        read -p ">" INPUT_YOURNAME
        sed -i -e 's/YOURNAME="'$YOURNAME'"/YOURNAME="'$INPUT_YOURNAME'"/' ./assets/userdata/allsettings.txt
        echo "名前を覚えましたよ! $INPUT_YOURNAMEさん!"
        ;;
    [2])
        echo "1. カスタム"
        echo "呼んでほしい敬称を入力してください。"
        read -p ">" dev2
        case "$dev2" in
        [1])
            read -p ">" ORIGINAL_KEISHOU
            sed -i -e 's/KEISHOU="'$KEISHOU'"/KEISHOU="'$ORIGINAL_KEISHOU'"/' ./assets/userdata/allsettings.txt
            ;;
        esac
        ;;
    [4])
        echo "開発者ログインをする際のパスワードを変更します。"
        echo "現在のパスワードを入力してください。"
        . etc/intsl_v/passwd/dev_pass
        read -s -p ">" input_password_data
        local input_password_check=$(echo ${input_password_data} | sha512sum | sed -e "s/-//g")
        if [[ ${input_password_check} = ${password} ]]; then
            echo "パスワードを変更しますか?"
            echo "(Y)es / (N)o"
            read -p ">" input_choise_data
            case ${input_choise_data} in
            [yY])
                echo "新しいパスワードを入力してください"
                read -s -p ">" input_new_password_data
                local input_new_password_check=$(echo ${input_new_password_data} | sha512sum | sed -e "s/-//g")
                sudo rm -rf etc/intsl_v/passwd/dev_pass
                cat <<EOF >etc/intsl_v/passwd/dev_pass
password="${input_new_password_check}"
EOF
                ;;
            [nN])
                echo "キャンセルしました"
                exit 0
                ;;
            esac
        fi
        ;;
    [5])
        . ./lib/main/java.sh
        ;;
    esac
}
DEVELOPER_LOGIN() {
    while [[ $RETRYCOUNT != $RETRYMAX ]]; do
        . etc/intsl_v/passwd/dev_pass
        if [ -e etc/intsl_v/passwd/dev_pass ]; then
            #spinner_progress_status="過去のログイン記録を参照中..."
            #SPINNER
            echo "パスワードを入力してください"
            read -s -p ">" input_password_data
            input_password_check=$(echo $input_password_data | sha512sum | sed -e "s/-//g")
            if [[ $input_password_check = $password ]]; then
                echo "認証に成功"
                break
            else
                echo -e "${ECHO_RED_COLOR}認証に失敗${ECHO_COLOR_EXIT}"
                exit 1
            fi
        else
            echo "開発者モードを初めて使用するため、必要なファイルを作成します"
            while [[ ! -e etc/intsl_v/passwd/dev_pass ]]; do
                spinner_progress_status="パスワードの生成 / ファイルの作成中"
                SPINNER
                echo "使用するパスワードを入力してください。"
                read -p ">" input_password_data
                password_generator=$(echo $input_password_data | sha512sum | sed -e "s/-//g")
                cat <<EOF >etc/intsl_v/passwd/dev_pass
password="$password_generator"
EOF
            done
            . etc/intsl_v/passwd/dev_pass
            echo "パスワードの生成にしました"
        fi
    done
    if [[ $RETRYCOUNT = $RETRYMAX ]]; then
        echo "リトライ上限に達しました。"
    fi
    WELCOME_DEV_MESSAGE
    DEV_HELP_MESSAGE
    DEV_CONTENT
}
WELCOME_DEV_MESSAGE() {
    if [ -n "$YOURNAME" ]; then
        if [ -n "$KEISHOU" ]; then
            echo -e '\e[1;37;32m'$DEV_WELCOME_ME''$YOURNAME$KEISHOU'\e[0m'
        else
            echo -e '\e[1;37;32m'$DEV_WELCOME_ME''$YOURNAME様'\e[0m'
        fi
    else
        if [ -n "$KEISHOU" ]; then
            echo -e '\e[1;37;32m'$DEV_WELCOME_ME'開発者'$KEISHOU'\e[0m'
        else
            echo -e '\e[1;37;32m'$DEV_WELCOME_ME'開発者様\e[0m'
        fi
    fi
}
mc_server_version_list() {
    if [[ -z "${input_server_type}" ]]; then
        echo "$INPUT_MC_SERVER_TYPE_ME"
        read -p ">" input_server_type
    fi
    case ${input_server_type} in
    [1])
        mc_server_edition="official"
        echo "OfficialServer"
        echo -e "VersionList: | \033[1;37m1.2.5\033[0;39m | \033[1;37m1.3.1\033[0;39m | \033[1;37m1.3.2\033[0;39m | \033[1;37m1.4.2\033[0;39m | \033[1;37m1.4.4\033[0;39m | \033[1;37m1.4.5\033[0;39m | \033[1;37m1.4.6\033[0;39m | \033[1;37m1.4.7\033[0;39m | \033[1;37m1.5.2\033[0;39m | \033[1;37m1.5.2\033[0;39m | \033[1;37m1.6.1\033[0;39m | \033[1;37m1.6.2\033[0;39m | \033[1;37m1.6.4\033[0;39m |"
        echo -e "| \033[1;37m1.7.2\033[0;39m | \033[1;37m1.7.5\033[0;39m | \033[1;37m1.7.6\033[0;39m | \033[1;37m1.7.7\033[0;39m | \033[1;37m1.7.8\033[0;39m | \033[1;37m1.7.9\033[0;39m | \033[1;37m1.7.10\033[0;39m | \033[1;37m1.8\033[0;39m | \033[1;37m1.8.1\033[0;39m | \033[1;37m1.8.2\033[0;39m | \033[1;37m1.8.3\033[0;39m | \033[1;37m1.8.4\033[0;39m | \033[1;37m1.8.5\033[0;39m | \033[1;37m1.8.6\033[0;39m | \033[1;37m1.8.7\033[0;39m | \033[1;37m1.8.8\033[0;39m | \033[1;37m1.8.9\033[0;39m |"
        echo -e "| \033[1;37m1.9\033[0;39m | \033[1;37m1.9.1\033[0;39m | \033[1;37m1.9.2\033[0;39m | \033[1;37m1.9.3\033[0;39m | \033[1;37m1.9.4\033[0;39m | \033[1;37m1.10\033[0;39m | \033[1;37m1.10.1\033[0;39m | \033[1;37m1.10.2\033[0;39m | \033[1;37m1.11\033[0;39m | \033[1;37m1.11.1\033[0;39m | \033[1;37m1.11.2\033[0;39m | \033[1;37m1.12\033[0;39m | \033[1;37m1.12.1\033[0;39m | \033[1;37m1.12.2\033[0;39m | \033[1;37m1.13\033[0;39m | \033[1;37m1.13.1\033[0;39m | \033[1;37m1.13.2\033[0;39m |"
        echo -e "| \033[1;37m1.14\033[0;39m | \033[1;37m1.14.1\033[0;39m | \033[1;37m1.14.2\033[0;39m | \033[1;37m1.14.3\033[0;39m | \033[1;37m1.14.4\033[0;39m | \033[1;37m1.15\033[0;39m | \033[1;37m1.15.1\033[0;39m | \033[1;37m1.15.2\033[0;39m |"
        . usr/lib/intsl_v/officialserver.sh
        . usr/lib/intsl_v/mc_server_download
        exit 0
        ;;
    [2])
        mc_server_edition="paper"
        echo "PaperServer"
        echo -e "VersionList: | \033[1;37m1.7.10\033[0;39m | \033[1;37m1.8.8\033[0;39m | \033[1;37m1.9.4\033[0;39m | \033[1;37m1.10.2\033[0;39m | \033[1;37m1.11.2\033[0;39m | \033[1;37m1.12.2\033[0;39m | \033[1;37m1.13.2\033[0;39m | \033[1;37m1.14.4\033[0;39m | \033[1;37m1.15.2\033[0;39m |"
        . usr/lib/intsl_v/paperserver.sh
        . usr/lib/intsl_v/mc_server_download
        ;;
    [3])
        mc_server_edition="spigot"
        echo "SpigotServer"
        . usr/lib/intsl_v/spigotserver.sh
        . usr/lib/intsl_v/mc_server_download
        ;;
    [4])
        mc_server_edition="forge"
        echo "ComingSoon..."
        ;;
    *)
        echo "数字を入力してください。"
        ;;
    esac
}
MC_SERVER_IMPORT() {
    if [[ -e OUTPUTSERVERLIST.txt ]]; then
        MAXLINE=$(cat OUTPUTSERVERLIST.txt | wc -l)
        while [[ $COUNT != $MAXLINE ]]; do
            . ./assets/settings.txt
            spinner_progress_status="進捗 $COUNT / $MAXLINE"
            SPINNER
            COUNT=$(($COUNT + 1))
            GETLINE=$(sed -n ${COUNT}P OUTPUTSERVERLIST.txt)
            sed -i ''${server_add_line}'i '"$GETLINE"'' ./lib/main/server_list.sh
            #サーバーの追加する行変更
            NEWSERVERLANE=$((server_add_line + 1))
            sed -i -e 's/server_add_line="'${server_add_line}'"/server_add_line="'$NEWSERVERLANE'"/' ./assets/settings.txt
        done
        echo -e "\e[1;37;32mIMPORT SUCCESS\e[0m"
    else
        echo "OUTPUTデータが存在しません。"
        echo "データをOUTPUTしてから再度実行してください。"
        exit 1
    fi
}
#------------------------------------------------------------------------------#
case $1 in
#INTSL本体
main)
    if [[ $2 = dev ]]; then
        dev="$3"
        DEVELOPER_LOGIN
        exit 0
    fi
    echo "MAIN SYSTEM"
    echo "■ extension | 拡張機能を管理できます"
    echo "■ dev       | 開発者向け機能を使用できます"
    echo "■ report   | INTSLに欲しい機能や不具合を報告できます。"
    read -p ">" input_data
    case ${input_data} in
    #開発者向け機能
    report)
        echo "INTSLに欲しい機能、又は不具合を報告できます。"
        echo "要望(request) | 不具合(bug)"
        read -p ">" input_data
        case ${input_data} in
        request)
            echo "要望を簡潔にまとめて入力してください。"
            read -p ">" INPUT_REQUEST_DATA
            curl -X POST --data 'request='$INPUT_REQUEST_DATA'' http://api.akarinext.org:3000/request
            echo
            ;;
        bug)
            echo "バグの概要などを簡潔にまとめ、入力してください。"
            read -p ">" INPUT_BUG_DATA
            #curl -X POST --data 'bug='$INPUT_BUG_DATA'' http://api.akarinext.org:3000/request
            echo
            ;;
        esac
        ;;
    dev)
        first_start
        DEVELOPER_LOGIN
        ;;
    #拡張機能系
    extension)
        echo "■ use | 拡張機能を使用します。"
        echo "■ import | 拡張機能をインポートします。"
        echo "■ list | 拡張機能の一覧を表示します。"
        read -p ">" INPUT_EXTENSION_DATA
        case $INPUT_EXTENSION_DATA in
        use)
            . ./lib/main/extension_manager.sh
            ;;
        import)
            echo "インポートするshの名前を入力してください。"
            read -p ">" INPUT_EXTENSION_NAME
            . ./assets/extension.txt
            while [[ $PLAYCOUNT != $EXTENSIONS ]]; do
                PLAYCOUNT=$(($PLAYCOUNT + 1))
                if [[ $EXTENSIONS = 0 ]]; then
                    break
                fi
                GET_MD5=$(echo "$INPUT_EXTENSION_NAME" | md5sum | sed -e "s/-//g")
                SPGET_MD5="EXT_MD5"
                eval $SPGET_MD5="\$EXT_MD5$PLAYCOUNT"
                if [[ $EXT_MD5 = $GET_MD5 ]]; then
                    echo "既にインストールされている為、サービスを終了します。"
                    exit
                fi
            done
            extension_import
            ;;
        list)
            . ./assets/extension.txt
            #拡張機能が入ってない際、不具合が発生する為予め宣言
            COUNT="0"
            echo "拡張機能の数: ${EXTENSIONS}個"
            echo "========================================"
            while [[ $COUNT != $EXTENSIONS ]]; do
                COUNT=$(($COUNT + 1))
                EXT_NAME="IE_XT"
                eval $EXT_NAME="\$IE_XT$COUNT"
                EXT_VERSION="INT_EXT"
                eval $EXT_VERSION="\$INT_EXT$COUNT"
                Formal_V=$(echo "$INT_EXT" | sed -e 's/\(.\)/\1./'g | sed -e 's/.$//')
                echo "拡張機能名: $IE_XT"
                echo "バージョン: $Formal_V"
                echo "========================================"
            done
            ;;
        vcheck)
            . ./assets/extension.txt
            rm -rf ./newversion.txt
            while [[ $PLAYCOUNT != $EXTENSIONS ]]; do
                . ./assets/extension.txt
                spinner_progress_status="アップデートの確認中 $3 / $EXTENSIONS"
                SPINNER
                COUNT=$(($COUNT + 1))
                PLAYCOUNT=$(($PLAYCOUNT + 1))
                EXT_NAME="V_URL"
                eval $EXT_NAME="\$V_URL$COUNT"
                wget -q $V_URL
                . ./newversion.txt
                regular_version=$(echo "$BO_DY" | sed -e 's/\(.\{1\}\)/.\1/g')
                EXT_NAME="IE_XT"
                eval $EXT_NAME="\$IE_XT$COUNT"
                EXT_VERSION="INT_EXT"
                eval $EXT_VERSION="\$INT_EXT$COUNT"
                #点付ける
                Formal_V=$(echo "$INT_EXT" | sed -e 's/\(.\)/\1./'g | sed -e 's/.$//')
                Formal_NEW_V=$(echo "$NEWVERSION" | sed -e 's/\(.\)/\1./'g | sed -e 's/.$//')
                if [[ $NEWVERSION -gt $INT_EXT ]]; then
                    echo "$IE_XT に更新があります"
                    echo -e '\e[1;37mExtension     Current     Latest\e[m'
                    echo "================================="
                    echo -e "$IE_XT     $Formal_V\e[32m         $Formal_NEW_V\e[m"
                    echo "更新を行いますか?"
                    echo "(Y)es / (N)o"
                    read -p ">" input_data
                    case ${input_data} in
                    [yY])
                        EXT_NAME="IE_XT"
                        eval $EXT_NAME="\$IE_XT$COUNT"
                        while [[ ! -e ./lib/extensions/old/old_${IE_XT}.sh ]]; do
                            spinner_progress_status="旧バージョンをバックアップ中"
                            SPINNER
                            mv ./lib/extensions/${IE_XT}.sh ./lib/extensions/old/old_${IE_XT}.sh
                        done
                        echo "ダウンロードを開始します。"
                        wget -q $EXDOWNLOAD -O ./lib/extensions/${IE_XT}.sh
                        #バージョン情報を更新
                        sed -i -e 's/INT_EXT'$COUNT'="'$INT_EXT'"/INT_EXT'$COUNT'="'$NEWVERSION'"/' ./assets/extension.txt
                        ;;
                    [nN])
                        echo "キャンセルしました。"
                        ;;
                    esac
                else
                    echo "更新は存在しません。"
                fi
                rm -rf ./newversion.txt
            done
            ;;
        uninstall)
            echo "拡張機能をアンインストールします。"
            echo "この機能は現在未完成です。"
            ;;
        donwload)
            echo "クラウドから拡張機能をダウンロードします"
            echo "この機能は現在未完成です。"
            ;;
        esac
        ;;
    esac
    ;;

#Minecraft系
vcheck)
    vcheck
    ;;
mc)
    first_start
    while :; do
        #サーバー作成オプション
        if [[ ${2} = "make" ]]; then
            input_server_type="${3}"
            if [[ -n ${4} ]]; then
                INPUT_SERVER_VERSION="${4}"
            fi
            input_server_name="${5}"
            INPUT_Y_OR_N="${6}"
            mc_server_version_list
        #サーバー管理オプション
        elif [[ ${2} = manage ]]; then
            serverstartlist="${3}"
            . var/lib/intsl_v/server_list
        elif [[ ${2} = output ]]; then
            serverlistoutput
        #サーバーインポートオプション
        elif [[ ${2} = import ]]; then
            MC_SERVER_IMPORT
            exit 0
        fi
        echo "■ make   | サーバーを作成します"
        echo "■ manage | サーバーを管理します"
        echo "■ import | サーバーリストをインポートします"
        echo "■ export | サーバーリストを出力します"
        read -p ">" input_data
        case "${input_data}" in
        make)
            echo -e "  \033[1;37m_<----^¯¯¯¯<Server List>¯¯¯¯^---->_\033[0;39m"
            echo "❘   1. OfficialServer 2. PaperServer  ❘"
            echo "❘   3. SpigotServer   4. ForgeServer  ❘"
            echo "❘   5. SpongeServer   6. BungeeCord   ❘"
            echo "❘   7. WaterFall      8. Travertine   ❘"
            mc_server_version_list
            ;;
        manage)
            . var/lib/intsl_v/server_list
            ;;
        import)
            MC_SERVER_IMPORT
            ;;
        export)
            serverlistoutput
            ;;
        esac
    done
    ;;

#DiscordBot系
discord)
    first_start
    while :; do
        echo "Discord"
        echo "■ eew   | eewBotに関するコマンドを使用できます"
        echo "■ jmusic | JmusicBotに関するコマンドを使用できます"
        echo "■ status  | 各種Botのステータスを確認します。"
        read -p ">" input_data
        case "${input_data}" in
        eew)
            . ./lib/main/discord/eew.sh
            ;;
        jmusic)
            . ./lib/main/discord/jmusic.sh
            ;;
        esac
    done
    ;;
*)

    echo -e "\033[1;37m##========================================##\033[0;39m"
    echo "##██╗███╗   ██╗████████╗███████╗██╗       ##"
    echo "##██║████╗  ██║╚══██╔══╝██╔════╝██║       ##"
    echo "##██║██╔██╗ ██║   ██║   ███████╗██║       ##"
    echo "##██║██║╚██╗██║   ██║   ╚════██║██║       ##"
    echo "##██║██║ ╚████║   ██║   ███████║███████╗  ##"
    echo "##╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚══════╝  ##"
    echo -e "\033[1;37m##========================================##\033[0;39m"
    echo -e "\033[0;31mmain\033[1;39m: INTSLに関する事を設定できます"
    echo -e "   └   \033[0;31mextension\033[1;39m: 拡張機能を管理します"
    echo -e "       └   \033[0;31muse\033[1;39m: 拡張機能を使用します"
    echo -e "       └   \033[0;31mlist\033[1;39m: 拡張機能の一覧を表示します"
    echo -e "       └   \033[0;31mimport\033[1;39m: 拡張機能をインポートします"
    echo -e "       └   \033[0;31mvcheck\033[1;39m: 拡張機能の更新を確認 /更新 します"
    echo -e "\033[0;31mmc\033[1;39m: Minecraftに関する機能を開始します"
    echo -e "   └   \033[0;31mmake\033[1;39m: サーバーを作成します"
    echo -e "   └   \033[0;31mmanage\033[1;39m: サーバーを管理します"
    echo -e "   └   \033[0;31mexport\033[1;39m: サーバーリストを出力します"
    echo -e "   └   \033[0;31mimport\033[1;39m: サーバーリストをインポートします"
    #echo -e "\033[0;31mdiscord\033[1;39m: Discordに関する機能を開始します"
    #echo -e "   └   \033[0;31meew\033[1;39m: eewBotをスタートします"
    #echo -e "       └   \033[0;31mstart\033[1;39m: EEWBotを起動します"
    #echo -e "   └   \033[0;31mjmusic\033[1;39m: JMusiBotをスタートします"
    #echo -e "       └   \033[0;31mstart\033[1;39m: JMusicBotを起動します"

    ;;
esac
exit 0
