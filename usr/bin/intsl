#!/usr/bin/env bash
#/をつける
#--------------------------------<<外部ファイル読み込み>>--------------------------------#
#ディレクトリー設定
. etc/intsl_v/directory
#設定ファイル
. ${SETTING_FILE_LOCATIONS}settings
#設定ファイル
. ${SETTING_FILE_LOCATIONS}info
#変数ファイル
. ${SETTING_FILE_LOCATIONS}variable
#言語ファイル
. ${LANGUAGE_FILE_LOCATIONS}${setting_use_lang}
export setting_use_lang
export SETTING_FILE_LOCATIONS
export LANGUAGE_FILE_LOCATIONS
#----------------------------------------------------------------------------------------#
SELF_DIR_PATH=$(
    cd $(dirname $0)
    pwd
)/
#TODO: -fオプションでサーバーディレクトリーを削除する様に

#その他使用ファイルの存在確認
if [ ! -e "${CACHE_FILE_LOCATIONS}minecraft_jar/official" -o ! -e "${CACHE_FILE_LOCATIONS}minecraft_jar/spigot" -o ! -e "${CACHE_FILE_LOCATIONS}minecraft_jar/paper" -o ! -e "${CACHE_FILE_LOCATIONS}minecraft_jar/forge" -o ! -e "${LIB_FILE_LOCATIONS}" -o ! -e "${USR_SHARE_FILE_LOCATIONS}doc/intsl_v/" -o ! -e "${USR_SHARE_FILE_LOCATIONS}intsl_v/locale" -o ! -e "${SETTING_FILE_LOCATIONS}" ]; then
    echo "intslを使用する上で必要なファイルが不足しています。"
    echo "不足しているファイルを作成する為、sudoのパスワードを入力してください。"
    sudo mkdir -p ${CACHE_FILE_LOCATIONS}minecraft_jar/official ${CACHE_FILE_LOCATIONS}minecraft_jar/spigot ${CACHE_FILE_LOCATIONS}minecraft_jar/paper ${CACHE_FILE_LOCATIONS}minecraft_jar/forge \
        ${LIB_FILE_LOCATIONS} ${USR_SHARE_FILE_LOCATIONS}doc/intsl_v/ ${USR_SHARE_FILE_LOCATIONS}intsl_v/locale ${SETTING_FILE_LOCATIONS}
fi

#基本システムファイルの存在確認
if [ ! -e "${SETTING_FILE_LOCATIONS}settings" -o ! -e "${VARIABLE_FILE_LOCATIONS}variable" -o ! -e "${LANGUAGE_FILE_LOCATIONS}" ]; then
    echo "システムファイルが破損している、又は存在しない為、起動に失敗しました。"
    echo "復元を試みますか?"
    echo "Coming Soon..."
fi
usage_exit() {
    cat <<EOF
##========================================##
##██╗███╗   ██╗████████╗███████╗██╗       ##
##██║████╗  ██║╚══██╔══╝██╔════╝██║       ##
##██║██╔██╗ ██║   ██║   ███████╗██║       ##
##██║██║╚██╗██║   ██║   ╚════██║██║       ##
##██║██║ ╚████║   ██║   ███████║███████╗  ##
##╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚══════╝  ##
##========================================##
使用方法: intsl mc [-options] [args...]
            (Minecraft関連機能を使う場合)
    または intsl main [-options] [args...]
            (標準機能を使う場合)
optionには次のものがあります。
    -h (--help)         ヘルプを表示します        
    -v (--version)      INTSLのバージョンを表示します
    --auto_remove       サーバーのファイル削除時などにファイルを削除します
詳しくは https://dev.akarinext.org/yupix/intsl-v を参照してください。
EOF
    exit 1
}

version() {
    regular_version=$(echo "${INTSL_V_VERSION}" | sed -e 's/\(.\)/\1./'g | sed -e 's/.$//')
    echo "VERSION:          ${regular_version}"
    echo "BUILD VERSION:    ${INTSL_V_BUILDVERSION}"
    echo "CODENAME:         ${INTSL_V_CODENAME}"
    echo "${regular_version}-${INTSL_V_BUILDVERSION}-${INTSL_V_CODENAME}"
}

for OPT in "$@"; do

    case $OPT in
        --auto_remove)
            auto_remove="true"
        ;;
    esac

done
#オプション取得
get_optision=$(echo $@ | grep -o "\-f")
#コマンド
first_start() {
    if [[ ${get_optision} != "-f" ]]; then
        #/をつける
        if [[ ${setting_package_mode} = "true" ]]; then
            local max_settings="2"
        else
            local max_settings="3"
        fi
        if [ ! -e ${CACHE_FILE_LOCATIONS}dummy ]; then
            echo "INTSLをインストールして頂きありがとうございます。"
            echo "本Projectのご利用をスムーズにスタートする為に初期設定をする事を推奨します！"
            while :; do
                read -p ">" set_preferences
                case $set_preferences in
                [yY] | [yY][eE][sS])
                    local count="1"
                    while [[ ${count} -le ${max_settings} ]]; do
                        local setting_text1="使用する言語を選択してください (${count} / ${max_settings})"
                        if [[ ${setting_package_mode} = "false" ]]; then
                            local setting_text2="使用するたびにバージョンアップを確認するか (${count} / ${max_settings})"
                            local setting_text3="(SpigotのBuild時,前回の環境をリセットするかどうか (${count} / ${max_settings})"
                        else
                            local setting_text2="(SpigotのBuild時,前回の環境をリセットするかどうか (${count} / ${max_settings})"
                        fi
                        local change_setting="${count}"
                        local overwrite="setting_text"
                        eval $overwrite="\$setting_text$count"
                        if [[ ${change_setting} = 1 ]]; then
                            echo "${setting_text}"
                            echo "${message_available_languages}"
                            while :; do
                                read -p ">" input_data
                                input_data=${input_data:-ja}
                                case ${input_data} in
                                ja)
                                    local run_sed_command="$(sed -i -e 's/setting_use_lang="'${setting_use_lang}'"/setting_use_lang="'${input_data}'"/' etc/intsl_v/settings)"
                                    break
                                    ;;
                                en)
                                    echo "ComingSoon..."
                                    local input_data="ja"
                                    local run_sed_command="$(sed -i -e 's/setting_use_lang="'${setting_use_lang}'"/setting_use_lang="'${input_data}'"/' etc/intsl_v/settings)"
                                    break
                                    ;;
                                *)
                                    echo "${message_nonexistent_language}"
                                    ;;
                                esac
                            done
                        else
                            echo "${setting_text}"
                            echo "${message_use_possible}"
                            read -p ">" input_data
                            input_data=${input_data:-true}
                            while :; do
                                if [ ${input_data,,} = true -o ${input_data,,} = yes -o ${input_data,,} = y ]; then
                                    local input_data="true"
                                    break
                                elif [ ${input_data,,} = false -o ${input_data,,} = no -o ${input_data,,} = n ]; then
                                    local input_data="false"
                                    break
                                else
                                    echo "(Y)es または (N)o を入力してください。"
                                fi
                            done
                            run_sed_command2="sed -i -e 's/setting_version_check=\"${setting_version_check}\"/setting_version_check=\"${input_data}\"/' etc/intsl_v/settings"
                            run_sed_command3="sed -i -e 's/setting_resetspigot=\"${setting_resetspigot}\"/setting_resetspigot=\"${input_data}\"/' etc/intsl_v/settings"
                            local overwrite="run_sed_command"
                            eval $overwrite="\$run_sed_command${count}"
                            eval ${run_sed_command}
                        fi
                        local count=$((${count} + 1))
                    done
                    touch ${CACHE_FILE_LOCATIONS}dummy
                    echo "これで初回設定は終了です！"
                    echo "それでは良いINTSL V ライフを！"
                    echo "3秒後に元の動作に自動で戻ります..."
                    sleep 3
                    break
                    ;;
                [nN] | [nN][oO])
                    touch ${CACHE_FILE_LOCATIONS}dummy
                    echo "初回設定をキャンセルしました。"
                    echo "設定はいつでも mainコマンドで変更可能です!"
                    echo "3秒後に元の動作に自動で戻ります..."
                    sleep 3
                    break
                    ;;
                *)
                    echo "(Y)es または (N)oを入力してください"
                    ;;
                esac
            done
        fi
    fi
}

run_spinner() {
    for ((n = 0; n < ${#chars}; n++)); do
        sleep 0.05
        echo -en "${chars:$n:1} ${spinner_progress_status} " "\r"
    done
}

serverlistoutput() {
    #TODO: サーバー数を作成し、0の場合は動かないようにする(2019/4/18)
    if [[ ${number_of_server} = 0 ]]; then
        echo "サーバーが存在しません \n サーバーを作成してから再度実行してください"
    fi
    echo "サーバーリストをアウトプットします。"
    while :; do
        if [[ -e ${CACHE_FILE_LOCATIONS}OUTPUTSERVERLIST.txt ]]; then
            rm -rf ${CACHE_FILE_LOCATIONS}OUTPUTSERVERLIST.txt
        else
            while [[ ! -e ${CACHE_FILE_LOCATIONS}OUTPUTSERVERLIST.txt ]]; do
                spinner_progress_status="出力中"
                run_spinner
                cat ${VAR_LIB_FILE_LOCATIONS}/server_list | awk '/STARTSERVERLIST/,/ENDSERVERLIST/' >${CACHE_FILE_LOCATIONS}OUTPUTSERVERLIST.txt
                sed -i -e '1,1d' ${CACHE_FILE_LOCATIONS}OUTPUTSERVERLIST.txt
                #先頭削除
                sed -i -e '$d' ${CACHE_FILE_LOCATIONS}OUTPUTSERVERLIST.txt
                #最終行削除
                sed -i -e '1d' ${CACHE_FILE_LOCATIONS}OUTPUTSERVERLIST.txt
                #空白削除
                sed -i '/^$/d' ${CACHE_FILE_LOCATIONS}OUTPUTSERVERLIST.txt
            done
            break
        fi
    done
    echo "${message_output_success}"
}

#INTSLGETV() {
#    VERSIONGET=$(echo "$INTSL_V_VERSIONBODY" | sed -e 's/\(.\{1\}\)/.\1/g')
#}

vcheck() {
    while :; do
        if [[ -e ${TMP_FILE_LOCATIONS}new-version.txt ]]; then
            spinner_progress_status="キャッシュの削除中"
            run_spinner
            rm -rf ${TMP_FILE_LOCATIONS}new-version.txt
        else
            spinner_progress_status="最新バージョンの確認中"
            wget -q ${INTREPOURL}pub/intsl_v/new-version.txt -P ${TMP_FILE_LOCATIONS}
            if [[ -e ${TMP_FILE_LOCATIONS}new-version.txt ]]; then
                . ${TMP_FILE_LOCATIONS}new-version.txt
                regular_version=$(echo "$NEWVERSION" | sed -e 's/\(.\)/\1./'g | sed -e 's/.$//')
                if [[ $NEWVERSION -gt ${INTSL_V_VERSION} ]]; then
                    echo "$message_update_exists"
                    echo -e "${ECHO_RED_COLOR}Current: INTSL-V-${INTSL_V_VERSION}${ECHO_COLOR_EXIT} ->  ${ECHO_GREEN_COLOR}New: INTSL-V-${regular_version}${ECHO_COLOR_EXIT}"
                    cat <<EOS
${message_downalod_file}
${message_use_possible}
EOS
                    read -p ">" input_data
                    input_data=${input_data:-y}
                    case ${input_data} in
                    [yY] | [yY][eE][sS])
                        echo "$message_updata_start"
                        while [[ ! -e ${TMP_FILE_LOCATIONS}INTSL_V-${regular_version}-${INTSL_V_EDITION}.zip ]]; do
                            spinner_progress_status="$DATA_DOWNLOAD_NOW_ME"
                            run_spinner
                            wget -q https://repo.akarinext.org/pub/intsl_v/${regular_version}/INTSL_V-${regular_version}-${INTSL_V_EDITION}.zip -P ${TMP_FILE_LOCATIONS}
                        done
                        echo "${message_download_success}"
                        serverlistoutput
                        unzip -qqo ${TMP_FILE_LOCATIONS}INTSL_V-${regular_version}-${INTSL_V_EDITION}.zip -d ${TMP_FILE_LOCATIONS}
                        if [[ -e ${TMP_FILE_LOCATIONS}INTSL_V-${regular_version}-${INTSL_V_EDITION} ]]; then
                            echo "ファイルの解凍に成功"
                            sudo cp -r ${TMP_FILE_LOCATIONS}INTSL_V-${regular_version}-${INTSL_V_EDITION}/. .
                        else
                            echo -e "${ECHO_RED_COLOR}${message_system_error}:${ECHO_COLOR_EXIT} ファイルの解凍に失敗しました"
                            echo "Systemを保護するためにサービスを終了します。"
                            break
                        fi
                        . ${VARIABLE_FILE_LOCATIONS}variable
                        if [[ ${NEWVERSION} -gt ${INTSL_V_VERSION} ]]; then
                            echo "バージョンアップに失敗"
                        else
                            rm -rf news.txt
                            wget -q ${INTREPOURL}pub/intsl/news.txt
                            MAXLINE=$(cat news.txt | wc -l)
                            while [[ $COUNT != $MAXLINE ]]; do
                                . ${SETTING_FILE_LOCATIONS}settings
                                spinner_progress_status="最新情報の取得中 $COUNT / $MAXLINE"
                                run_spinner
                                COUNT=$(($COUNT + 1))
                                GETLINE=$(sed -n ${COUNT}P news.txt)
                                echo "$GETLINE"
                            done
                            echo "$message_updata_success"

                        fi
                        ;;
                    [nN] | [nN][oO])
                        echo "${message_system_canceled}"
                        ;;
                    esac
                    echo $name
                    break
                else
                    echo -e '現在のINTSL Vは\e[1;37;32m最新バージョン\e[0mで実行中です '
                    break
                fi
            else
                echo "$message_download_failed"
                break
            fi
        fi
    done
}

DONWLOAD_CANCELLATION() {
    echo "ダウンロードをキャンセルしたため、サービスを終了します"
    break
    exit 0
}

mc_server_create() {
    . ${LIB_FILE_LOCATIONS}server_create
}
extension_import() {
    if [[ -e ${HOME_FILE_LOCATIONS}intsl_v/extensions/${INPUT_EXTENSION_NAME}.sh ]]; then

        rm -rf ${TMP_FILE_LOCATIONS}${INPUT_EXTENSION_NAME}

        GETIEXT=$(cat ${HOME_FILE_LOCATIONS}intsl_v/extensions/${INPUT_EXTENSION_NAME}.sh | grep -e IEXT -e INT -e VURL >>${TMP_FILE_LOCATIONS}${INPUT_EXTENSION_NAME})
        MAXLINE=$(cat ${TMP_FILE_LOCATIONS}${INPUT_EXTENSION_NAME} | wc -l)

        sed -i ''$INTSL_EXTENSION_LIST_ADD_LINE'i'\#${INPUT_EXTENSION_NAME}START'' ${VAR_LIB_FILE_LOCATIONS}extensions

        NEW_INTSL_EXTENSION_LIST_ADD_LINE=$((INTSL_EXTENSION_LIST_ADD_LINE + 1))
        sed -i -e 's/INTSL_EXTENSION_LIST_ADD_LINE="'$INTSL_EXTENSION_LIST_ADD_LINE'"/INTSL_EXTENSION_LIST_ADD_LINE="'$NEW_INTSL_EXTENSION_LIST_ADD_LINE'"/' ${SETTING_FILE_LOCATIONS}settings

        #拡張機能リストの生成
        for i in $(seq $MAXLINE); do
            #Config再読込
            . ${SETTING_FILE_LOCATIONS}settings

            spinner_progress_status="進捗 ${i} / $MAXLINE"
            run_spinner

            GETLINE=$(sed -n ${i}P ${TMP_FILE_LOCATIONS}${INPUT_EXTENSION_NAME})
            sed -i ''$INTSL_EXTENSION_LIST_ADD_LINE'i '"$GETLINE"'' ${VAR_LIB_FILE_LOCATIONS}extensions

            NEW_INTSL_EXTENSION_LIST_ADD_LINE=$((INTSL_EXTENSION_LIST_ADD_LINE + 1))
            sed -i -e 's/INTSL_EXTENSION_LIST_ADD_LINE="'$INTSL_EXTENSION_LIST_ADD_LINE'"/INTSL_EXTENSION_LIST_ADD_LINE="'$NEW_INTSL_EXTENSION_LIST_ADD_LINE'"/' ${SETTING_FILE_LOCATIONS}settings
        done

        #行の取得
        MAXLINE=$(cat ${HOME_FILE_LOCATIONS}intsl_v/extensions/${INPUT_EXTENSION_NAME}.sh | wc -l)
        for a in $(seq 7); do
            #Config再読込
            . ${SETTING_FILE_LOCATIONS}settings

            if [[ ${a} = 1 ]]; then
                #拡張機能スタート
                sed -i ''$INTSL_EXTENSION_MANAGER_ADD_LINE'i'\#${INPUT_EXTENSION_NAME}START'' ${VAR_LIB_FILE_LOCATIONS}extension_manager
                NEW_INTSL_EXTENSION_MANAGER_ADD_LINE=$((INTSL_EXTENSION_MANAGER_ADD_LINE + 1))
                sed -i -e 's/INTSL_EXTENSION_MANAGER_ADD_LINE="'$INTSL_EXTENSION_MANAGER_ADD_LINE'"/INTSL_EXTENSION_MANAGER_ADD_LINE="'$NEW_INTSL_EXTENSION_MANAGER_ADD_LINE'"/' ${SETTING_FILE_LOCATIONS}settings
            elif [[ ${a} = 2 ]]; then
                #マネージャーに起動スクリプトを生成
                sed -i ''$INTSL_EXTENSION_MANAGER_ADD_LINE'i'${INPUT_EXTENSION_NAME}\)'' ${VAR_LIB_FILE_LOCATIONS}extension_manager
                sed -i ''$INTSL_EXTENSION_MANAGER_ADD_LINE'a ;;' ${VAR_LIB_FILE_LOCATIONS}extension_manager
                sed -i ''$INTSL_EXTENSION_MANAGER_ADD_LINE'a . ${HOME_FILE_LOCATIONS}intsl_v/extensions'${INPUT_EXTENSION_NAME}.sh'' ${VAR_LIB_FILE_LOCATIONS}extension_manager
                NEW_INTSL_EXTENSION_MANAGER_ADD_LINE=$((INTSL_EXTENSION_MANAGER_ADD_LINE + 3))
                sed -i -e 's/INTSL_EXTENSION_MANAGER_ADD_LINE="'$INTSL_EXTENSION_MANAGER_ADD_LINE'"/INTSL_EXTENSION_MANAGER_ADD_LINE="'$NEW_INTSL_EXTENSION_MANAGER_ADD_LINE'"/' ${SETTING_FILE_LOCATIONS}settings
            elif [[ ${a} = 3 ]]; then
                #STOPの追加
                sed -i ''$INTSL_EXTENSION_MANAGER_ADD_LINE'i'\#${INPUT_EXTENSION_NAME}STOP'' ${VAR_LIB_FILE_LOCATIONS}extension_manager
                NEW_INTSL_EXTENSION_MANAGER_ADD_LINE=$((INTSL_EXTENSION_MANAGER_ADD_LINE + 1))
                sed -i -e 's/INTSL_EXTENSION_MANAGER_ADD_LINE="'$INTSL_EXTENSION_MANAGER_ADD_LINE'"/INTSL_EXTENSION_MANAGER_ADD_LINE="'$NEW_INTSL_EXTENSION_MANAGER_ADD_LINE'"/' ${SETTING_FILE_LOCATIONS}settings
            elif [[ ${a} = 4 ]]; then
                . ${VAR_LIB_FILE_LOCATIONS}extensions
                #拡張機能数の増加
                NEWEXTENSIONS=$((EXTENSIONS + 1))
                sed -i -e 's/EXTENSIONS="'$EXTENSIONS'"/EXTENSIONS="'$NEWEXTENSIONS'"/' ${VAR_LIB_FILE_LOCATIONS}extensions
            elif [[ ${a} = 5 ]]; then
                sed -i -e "s/IEXT/IE_XT$EXTENSIONS/g" ${VAR_LIB_FILE_LOCATIONS}extensions
                sed -i -e "s/INTEXT/INT_EXT$EXTENSIONS/g" ${VAR_LIB_FILE_LOCATIONS}extensions
                sed -i -e "s/VURL/V_URL$EXTENSIONS/g" ${VAR_LIB_FILE_LOCATIONS}extensions
                sed -i -e "s/EXDOWNLOAD/EX_DOWNLOAD$EXTENSIONS/g" ${VAR_LIB_FILE_LOCATIONS}extensions
            elif [[ ${a} = 6 ]]; then
                #MD5値取得
                EXT_MD5=$(echo "$INPUT_EXTENSION_NAME" | md5sum | sed -e "s/-//g")
                sed -i ''$INTSL_EXTENSION_LIST_ADD_LINE'i '"EXTMD5=\"$EXT_MD5\""'' ${VAR_LIB_FILE_LOCATIONS}extensions
                sed -i -e "s/EXTMD5/EXT_MD5$EXTENSIONS/g" ${VAR_LIB_FILE_LOCATIONS}extensions
                NEW_INTSL_EXTENSION_LIST_ADD_LINE=$((INTSL_EXTENSION_LIST_ADD_LINE + 1))
                sed -i -e 's/INTSL_EXTENSION_LIST_ADD_LINE="'$INTSL_EXTENSION_LIST_ADD_LINE'"/INTSL_EXTENSION_LIST_ADD_LINE="'$NEW_INTSL_EXTENSION_LIST_ADD_LINE'"/' ${SETTING_FILE_LOCATIONS}settings
            fi
        done

        #拡張機能終了
        sed -i ''$INTSL_EXTENSION_LIST_ADD_LINE'i'\#${INPUT_EXTENSION_NAME}EXIT'' ${VAR_LIB_FILE_LOCATIONS}extensions
        #追加行変更1
        NEW_INTSL_EXTENSION_LIST_ADD_LINE=$((INTSL_EXTENSION_LIST_ADD_LINE + 1))
        sed -i -e 's/INTSL_EXTENSION_LIST_ADD_LINE="'$INTSL_EXTENSION_LIST_ADD_LINE'"/INTSL_EXTENSION_LIST_ADD_LINE="'$NEW_INTSL_EXTENSION_LIST_ADD_LINE'"/' ${SETTING_FILE_LOCATIONS}settings

    else
        echo "shが存在しません"
    fi

}

extension_cloud_install() {
    #キャッシュの削除
    rm -rf ${TMP_FILE_LOCATIONS}extensions ${TMP_FILE_LOCATIONS}extensions_list
    #拡張機能一覧を取得
    wget -q ${INTREPOURL}pub/intsl_v/extensions -P ${TMP_FILE_LOCATIONS}
    #拡張機能一覧を使えるように
    . ${TMP_FILE_LOCATIONS}extensions
    touch ${TMP_FILE_LOCATIONS}extensions_list
    sed -i -e '1s/^/\n/' ${TMP_FILE_LOCATIONS}extensions_list
    echo -e '\e[1;37m名前 バージョン\e[m' | awk '{printf "%-15s %s\n",$1,$2}'
    for i in $(seq ${number_of_extensions}); do
        #拡張機能名
        overwrite_ext_name="main_ext_name"
        eval ${overwrite_ext_name}="\$CLOUD_EXT_NAME${i}"
        #拡張機能バージョン
        overwrite_ext_version="main_ext_version"
        eval ${overwrite_ext_version}="\$CLOUD_EXT_VERSION${i}"
        #拡張機能URL
        overwrite_ext_url="main_ext_url"
        eval ${overwrite_ext_url}="\$CLOUD_EXT_URL${i}"

        echo "=================================" >>${TMP_FILE_LOCATIONS}extensions_list
        echo "${main_ext_name} ${main_ext_version}" >>${TMP_FILE_LOCATIONS}extensions_list
    done
    echo "=================================" >>${TMP_FILE_LOCATIONS}extensions_list
    cat ${TMP_FILE_LOCATIONS}extensions_list | column -t | awk '{printf "%-15s %s\n",$1,$2}'
    echo "拡張機能の取得に成功しました"
    echo "取得した拡張機能数: ${i}"
    read -p ">" input_install_extension_name
    for e in $(seq ${number_of_extensions}); do
        #拡張機能名
        overwrite_ext_name="main_ext_name"
        eval ${overwrite_ext_name}="\$CLOUD_EXT_NAME${e}"
        #拡張機能URL
        overwrite_ext_url="main_ext_url"
        eval ${overwrite_ext_url}="\$CLOUD_EXT_URL${e}"
        spinner_progress_status="拡張機能を検索中"
        run_spinner
        rm -rf ${input_install_extension_name,,}.sh
        if [[ ${input_install_extension_name,,} = ${main_ext_name,,} ]]; then
            echo "拡張機能が存在します!"
            echo "インストールを行いますか?"
            echo "${message_use_possible}"
            read -p ">" INPUT_Y_OR_N
            case $INPUT_Y_OR_N in
            [yY] | [yY][eE][sS])
                echo "インストールを開始します..."
                spinner_progress_status="インストールを開始しています..."
                run_spinner
                wget -q ${main_ext_url} -P ${TMP_FILE_LOCATIONS}
                if [[ ! -e ${TMP_FILE_LOCATIONS}${main_ext_name,,}.sh ]]; then
                    spinner_progress_status="拡張機能をダウンロード中"
                else
                    echo "ダウンロードに成功"
                    mv ${TMP_FILE_LOCATIONS}${main_ext_name,,}.sh ${HOME_FILE_LOCATIONS}intsl_v/extensions
                    INPUT_EXTENSION_NAME="${main_ext_name,,}"
                    extension_import
                fi
                ;;
            [nN] | [nN][oO])
                echo "${message_system_canceled}"
                ;;
            esac
            break
        elif [[ ${e} = ${number_of_extensions} ]]; then
            echo "拡張機能が見つかりませんでした..."
        fi
    done
}
DEV_HELP_MESSAGE() {
    echo "使用方法: linux.sh main dev [args...] "
    echo "■ 1.自分の名前を決める        ■ 4.開発者ログイン時のパスワードを変更する"
    echo "■ 2.呼ぶさいの敬称を決める    ■ 5.依存関係の自動構築[α](お試し版]を使う"
    echo "■ 3.新型起動方法を実行する    ■ 6.Coming Soon..."
}
DEV_CONTENT() {
    if [ -z "$dev" ]; then
        read -p ">" dev
    elif [[ $dev = "-f" ]]; then
        read -p ">" dev
    fi
    case "$dev" in
    "--help")
        DEV_HELP_MESSAGE
        ;;
    [1])
        echo "呼んでほしい名前を入力してください。"
        read -p ">" INPUT_YOURNAME
        sed -i -e 's/YOURNAME="'$YOURNAME'"/YOURNAME="'$INPUT_YOURNAME'"/' ./assets/userdata/allsettings.txt
        echo "名前を覚えましたよ! $INPUT_YOURNAMEさん!"
        ;;
    [2])
        echo "1. カスタム"
        echo "呼んでほしい敬称を入力してください。"
        read -p ">" dev2
        case "$dev2" in
        [1])
            read -p ">" ORIGINAL_KEISHOU
            sed -i -e 's/KEISHOU="'$KEISHOU'"/KEISHOU="'$ORIGINAL_KEISHOU'"/' ./assets/userdata/allsettings.txt
            ;;
        esac
        ;;
    [4])
        echo "開発者ログインをする際のパスワードを変更します。"
        echo "現在のパスワードを入力してください。"
        . etc/intsl_v/passwd/dev_pass
        read -s -p ">" input_password_data
        local input_password_check=$(echo ${input_password_data} | sha512sum | sed -e "s/-//g")
        if [[ ${input_password_check} = ${password} ]]; then
            echo "パスワードを変更しますか?"
            echo "(Y)es / (N)o"
            read -p ">" input_choise_data
            case ${input_choise_data} in
            [yY])
                echo "新しいパスワードを入力してください"
                read -s -p ">" input_new_password_data
                local input_new_password_check=$(echo ${input_new_password_data} | sha512sum | sed -e "s/-//g")
                sudo rm -rf etc/intsl_v/passwd/dev_pass
                cat <<EOF >etc/intsl_v/passwd/dev_pass
password="${input_new_password_check}"
EOF
                ;;
            [nN])
                echo "${message_system_canceled}"
                exit 0
                ;;
            esac
        fi
        ;;
    [5])
        . ./lib/main/java.sh
        ;;
    esac
}
DEVELOPER_LOGIN() {
    while [[ $RETRYCOUNT != $RETRYMAX ]]; do
        . ${SETTING_FILE_LOCATIONS}passwd/dev_pass
        if [ -e ${SETTING_FILE_LOCATIONS}passwd/dev_pass ]; then
            #spinner_progress_status="過去のログイン記録を参照中..."
            #run_spinner
            echo "パスワードを入力してください"
            read -s -p ">" input_password_data
            input_password_check=$(echo $input_password_data | sha512sum | sed -e "s/-//g")
            if [[ $input_password_check = $password ]]; then
                echo "認証に成功"
                break
            else
                echo -e "${ECHO_RED_COLOR}認証に失敗${ECHO_COLOR_EXIT}"
                exit 1
            fi
        else
            echo "開発者モードを初めて使用するため、必要なファイルを作成します"
            while [[ ! -e ${SETTING_FILE_LOCATIONS}passwd/dev_pass ]]; do
                spinner_progress_status="パスワードの生成 / ファイルの作成中"
                run_spinner
                echo "使用するパスワードを入力してください。"
                read -p ">" input_password_data
                password_generator=$(echo $input_password_data | sha512sum | sed -e "s/-//g")
                cat <<EOF >${SETTING_FILE_LOCATIONS}passwd/dev_pass
password="$password_generator"
EOF
            done
            . ${SETTING_FILE_LOCATIONS}passwd/dev_pass
            echo "パスワードの生成にしました"
        fi
    done
    if [[ $RETRYCOUNT = $RETRYMAX ]]; then
        echo "リトライ上限に達しました。"
    fi
    WELCOME_DEV_MESSAGE
    DEV_HELP_MESSAGE
    DEV_CONTENT
}
WELCOME_DEV_MESSAGE() {
    if [ -n "$YOURNAME" ]; then
        if [ -n "$KEISHOU" ]; then
            echo -e '\e[1;37;32m'$DEV_WELCOME_ME''$YOURNAME$KEISHOU'\e[0m'
        else
            echo -e '\e[1;37;32m'$DEV_WELCOME_ME''$YOURNAME様'\e[0m'
        fi
    else
        if [ -n "$KEISHOU" ]; then
            echo -e '\e[1;37;32m'$DEV_WELCOME_ME'開発者'$KEISHOU'\e[0m'
        else
            echo -e '\e[1;37;32m'$DEV_WELCOME_ME'開発者様\e[0m'
        fi
    fi
}
mc_server_version_list() {
    if [[ -z "${input_server_type}" ]]; then
        echo "$INPUT_MC_SERVER_TYPE_ME"
        read -p ">" input_server_type
    fi
    case ${input_server_type} in
    [1])
        echo -e "VersionList:|1.2.5|1.3.1|1.3.2|1.4.2|1.4.4|1.4.5|1.4.6|1.4.7|1.5.2|1.5.2|1.6.1|1.6.2|1.6.4|" &&
            echo -e "|1.7.2|1.7.5|1.7.6|1.7.7|1.7.8|1.7.9|1.7.10|1.8|1.8.1|1.8.2|1.8.3|1.8.4|1.8.5|1.8.6|1.8.7|1.8.8|1.8.9|" &&
            echo -e "|1.9|1.9.1|1.9.2|1.9.3|1.9.4|1.10|1.10.1|1.10.2|1.11|1.11.1|1.11.2|1.12|1.12.1|1.12.2|1.13|1.13.1|1.13.2|" &&
            echo -e "|1.14|1.14.1|1.14.2|1.14.3|1.14.4|1.15|1.15.1|1.15.2|" | column
        mc_server_edition="official"
        echo "OfficialServer"
        . ${LIB_FILE_LOCATIONS}officialserver.sh
        . ${LIB_FILE_LOCATIONS}mc_server_download
        exit 0
        ;;
    [2])
        mc_server_edition="paper"
        echo "PaperServer"
        echo -e "VersionList: | \033[1;37m1.7.10\033[0;39m | \033[1;37m1.8.8\033[0;39m | \033[1;37m1.9.4\033[0;39m | \033[1;37m1.10.2\033[0;39m | \033[1;37m1.11.2\033[0;39m | \033[1;37m1.12.2\033[0;39m | \033[1;37m1.13.2\033[0;39m | \033[1;37m1.14.4\033[0;39m | \033[1;37m1.15.2\033[0;39m |"
        . ${LIB_FILE_LOCATIONS}paperserver.sh
        . ${LIB_FILE_LOCATIONS}mc_server_download
        ;;
    [3])
        mc_server_edition="spigot"
        echo "SpigotServer"
        . ${LIB_FILE_LOCATIONS}spigotserver.sh
        . ${LIB_FILE_LOCATIONS}mc_server_download
        ;;
    [4])
        mc_server_edition="forge"
        echo "ComingSoon..."
        ;;
    *)
        echo "数字を入力してください。"
        ;;
    esac
}
MC_SERVER_IMPORT() {
    if [[ -e ${CACHE_FILE_LOCATIONS}OUTPUTSERVERLIST.txt ]]; then
        MAXLINE=$(cat ${CACHE_FILE_LOCATIONS}OUTPUTSERVERLIST.txt | wc -l)
        while [[ $COUNT != $MAXLINE ]]; do
            . ${SETTING_FILE_LOCATIONS}settings
            spinner_progress_status="進捗 $COUNT / $MAXLINE"
            run_spinner
            COUNT=$(($COUNT + 1))
            GETLINE=$(sed -n ${COUNT}P ${CACHE_FILE_LOCATIONS}OUTPUTSERVERLIST.txt)
            sed -i ''${server_add_line}'i '"$GETLINE"'' ${VAR_LIB_FILE_LOCATIONS}server_list
            #サーバーの追加する行変更
            NEWSERVERLANE=$((server_add_line + 1))
            sed -i -e 's/server_add_line="'${server_add_line}'"/server_add_line="'$NEWSERVERLANE'"/' ${SETTING_FILE_LOCATIONS}settings
        done
        echo -e "\e[1;37;32mIMPORT SUCCESS\e[0m"
    else
        echo "OUTPUTデータが存在しません。"
        echo "データをOUTPUTしてから再度実行してください。"
        exit 1
    fi
}
#------------------------------------------------------------------------------#
case $1 in
#INTSL本体
main)
    if [[ $2 = dev ]]; then
        dev="$3"
        DEVELOPER_LOGIN
        exit 0
    fi
    echo "MAIN SYSTEM"
    echo "■ extension | 拡張機能を管理できます"
    echo "■ dev       | 開発者向け機能を使用できます"
    echo "■ report   | INTSLに欲しい機能や不具合を報告できます。"
    read -p ">" input_data
    case ${input_data} in
    #開発者向け機能
    [vV][eE][rR][sS][iI][oO][nN])
        regular_intsl_v_version=$(echo "${INTSL_V_VERSION}" | sed -e 's/\(.\)/\1./'g | sed -e 's/.$//')
        echo "バージョン:  ${regular_intsl_v_version}"
        echo "エディション:${INTSL_V_EDITION}"
        echo "Build:       ${INTSL_V_BUILD_VERSION} "
        ;;
    report)
        echo "INTSLに欲しい機能、又は不具合を報告できます。"
        echo "要望(request) | 不具合(bug)"
        read -p ">" input_data
        case ${input_data} in
        request)
            echo "要望を簡潔にまとめて入力してください。"
            read -p ">" INPUT_REQUEST_DATA
            curl -X POST --data 'request='$INPUT_REQUEST_DATA'' http://api.akarinext.org:3000/request
            echo
            ;;
        bug)
            echo "バグの概要などを簡潔にまとめ、入力してください。"
            read -p ">" INPUT_BUG_DATA
            #curl -X POST --data 'bug='$INPUT_BUG_DATA'' http://api.akarinext.org:3000/request
            echo
            ;;
        esac
        ;;
    dev)
        first_start
        DEVELOPER_LOGIN
        ;;
    #拡張機能系
    extension)
        echo "■ use | 拡張機能を使用します。"
        echo "■ import | 拡張機能をインポートします。"
        echo "■ list | 拡張機能の一覧を表示します。"
        read -p ">" INPUT_EXTENSION_DATA
        case $INPUT_EXTENSION_DATA in
        use)
            . ${VAR_LIB_FILE_LOCATIONS}extension_manager
            ;;
        import)
            echo "インポートするshの名前を入力してください。"
            read -p ">" INPUT_EXTENSION_NAME
            . ${VAR_LIB_FILE_LOCATIONS}extensions
            while [[ $PLAYCOUNT != $EXTENSIONS ]]; do
                PLAYCOUNT=$(($PLAYCOUNT + 1))
                if [[ $EXTENSIONS = 0 ]]; then
                    break
                fi
                GET_MD5=$(echo "$INPUT_EXTENSION_NAME" | md5sum | sed -e "s/-//g")
                SPGET_MD5="EXT_MD5"
                eval $SPGET_MD5="\$EXT_MD5$PLAYCOUNT"
                if [[ $EXT_MD5 = $GET_MD5 ]]; then
                    echo "既にインストールされている為、サービスを終了します。"
                    exit
                fi
            done
            extension_import
            ;;
        list)
            . ${VAR_LIB_FILE_LOCATIONS}extensions
            #拡張機能が入ってない際、不具合が発生する為予め宣言
            COUNT="0"
            echo "拡張機能の数: ${EXTENSIONS}個"
            echo "========================================"
            while [[ $COUNT != $EXTENSIONS ]]; do
                COUNT=$(($COUNT + 1))
                EXT_NAME="IE_XT"
                eval $EXT_NAME="\$IE_XT$COUNT"
                EXT_VERSION="INT_EXT"
                eval $EXT_VERSION="\$INT_EXT$COUNT"
                Formal_V=$(echo "$INT_EXT" | sed -e 's/\(.\)/\1./'g | sed -e 's/.$//')
                echo "拡張機能名: $IE_XT"
                echo "バージョン: $Formal_V"
                echo "========================================"
            done
            ;;
        vcheck)
            . ${VAR_LIB_FILE_LOCATIONS}extensions
            rm -rf ./newversion.txt
            while [[ $PLAYCOUNT != $EXTENSIONS ]]; do
                . ${VAR_LIB_FILE_LOCATIONS}extensions
                spinner_progress_status="アップデートの確認中 $3 / $EXTENSIONS"
                run_spinner
                COUNT=$(($COUNT + 1))
                PLAYCOUNT=$(($PLAYCOUNT + 1))
                EXT_NAME="V_URL"
                eval $EXT_NAME="\$V_URL$COUNT"
                wget -q $V_URL
                . ./newversion.txt
                regular_version=$(echo "$BO_DY" | sed -e 's/\(.\{1\}\)/.\1/g')
                EXT_NAME="IE_XT"
                eval $EXT_NAME="\$IE_XT$COUNT"
                EXT_VERSION="INT_EXT"
                eval $EXT_VERSION="\$INT_EXT$COUNT"
                #点付ける
                Formal_V=$(echo "$INT_EXT" | sed -e 's/\(.\)/\1./'g | sed -e 's/.$//')
                Formal_NEW_V=$(echo "$NEWVERSION" | sed -e 's/\(.\)/\1./'g | sed -e 's/.$//')
                if [[ $NEWVERSION -gt $INT_EXT ]]; then
                    echo "$IE_XT に更新があります"
                    echo -e '\e[1;37mExtension     Current     Latest\e[m'
                    echo "================================="
                    echo -e "$IE_XT     $Formal_V\e[32m         $Formal_NEW_V\e[m"
                    echo "更新を行いますか?"
                    echo "(Y)es / (N)o"
                    read -p ">" input_data
                    case ${input_data} in
                    [yY])
                        EXT_NAME="IE_XT"
                        eval $EXT_NAME="\$IE_XT$COUNT"
                        while [[ ! -e ${VAR_LIB_FILE_LOCATIONS}extensionsold/old_${IE_XT}.sh ]]; do
                            spinner_progress_status="旧バージョンをバックアップ中"
                            run_spinner
                            mv ${VAR_LIB_FILE_LOCATIONS}extensions${IE_XT}.sh ${VAR_LIB_FILE_LOCATIONS}extensionsold/old_${IE_XT}.sh
                        done
                        echo "ダウンロードを開始します。"
                        wget -q $EXDOWNLOAD -O ${VAR_LIB_FILE_LOCATIONS}extensions${IE_XT}.sh
                        #バージョン情報を更新
                        sed -i -e 's/INT_EXT'$COUNT'="'$INT_EXT'"/INT_EXT'$COUNT'="'$NEWVERSION'"/' ${VAR_LIB_FILE_LOCATIONS}extensions
                        ;;
                    [nN])
                        echo "${message_system_canceled}"
                        ;;
                    esac
                else
                    echo "更新は存在しません。"
                fi
                rm -rf ./newversion.txt
            done
            ;;
        uninstall)
            echo "拡張機能をアンインストールします。"
            read -p ">" input_data
            #拡張機能リストから削除
            get_ext_list_start_line=$(grep -nw ${input_data,,}START ${VAR_LIB_FILE_LOCATIONS}extensions | grep -o '[0-9]*')
            get_ext_list_exit_line=$(grep -nw ${input_data,,}EXIT ${VAR_LIB_FILE_LOCATIONS}extensions | grep -o '[0-9]*')
            sed -i -e ''${get_ext_list_start_line}','${get_ext_list_exit_line}'d' ${VAR_LIB_FILE_LOCATIONS}extensions

            #拡張機能マネージャー
            get_ext_manager_start_line=$(grep -nw ${input_data,,}START ${VAR_LIB_FILE_LOCATIONS}extension_manager | grep -o '[0-9]*')
            get_ext_manager_exit_line=$(grep -nw ${input_data,,}STOP ${VAR_LIB_FILE_LOCATIONS}extension_manager | grep -o '[0-9]*')
            sed -i -e ''${get_ext_manager_start_line}','${get_ext_manager_exit_line}'d' ${VAR_LIB_FILE_LOCATIONS}extension_manager

            . ${VAR_LIB_FILE_LOCATIONS}extensions
            #拡張機能数の増加
            NEWEXTENSIONS=$((EXTENSIONS - 1))
            sed -i -e 's/EXTENSIONS="'${EXTENSIONS}'"/EXTENSIONS="'${NEWEXTENSIONS}'"/' ${VAR_LIB_FILE_LOCATIONS}extensions
            #設定の行追加のやつを修正
            NEW_INTSL_EXTENSION_LIST_ADD_LINE=$((INTSL_EXTENSION_LIST_ADD_LINE - 6))
            sed -i -e 's/INTSL_EXTENSION_LIST_ADD_LINE="'${INTSL_EXTENSION_LIST_ADD_LINE}'"/INTSL_EXTENSION_LIST_ADD_LINE="'${NEW_INTSL_EXTENSION_LIST_ADD_LINE}'"/' ${SETTING_FILE_LOCATIONS}settings
            NEW_INTSL_EXTENSION_MANAGER_ADD_LINE=$((INTSL_EXTENSION_MANAGER_ADD_LINE - 5))
            sed -i -e 's/INTSL_EXTENSION_MANAGER_ADD_LINE="'${INTSL_EXTENSION_MANAGER_ADD_LINE}'"/INTSL_EXTENSION_MANAGER_ADD_LINE="'${NEW_INTSL_EXTENSION_MANAGER_ADD_LINE}'"/' ${SETTING_FILE_LOCATIONS}settings
            ;;
        cloud)
            echo "クラウドから拡張機能をダウンロードします"
            extension_cloud_install
            ;;
        esac
        ;;
    esac
    ;;

#Minecraft系
vcheck)
    vcheck
    ;;
mc)
    first_start
    while :; do
        #サーバー作成オプション
        if [[ ${2} = "make" ]]; then
            input_server_type="${3}"
            if [[ -n ${4} ]]; then
                INPUT_SERVER_VERSION="${4}"
            fi
            input_server_name="${5}"
            INPUT_Y_OR_N="${6}"
            mc_server_version_list
        #サーバー管理オプション
        elif [[ ${2} = manage ]]; then
            word="管理するサーバー名"
            serverstartlist="${3}"
            purpose="server_list"
            . ${VAR_LIB_FILE_LOCATIONS}server_list
        elif [[ ${2} = output ]]; then
            serverlistoutput
        #サーバーインポートオプション
        elif [[ ${2} = import ]]; then
            MC_SERVER_IMPORT
            exit 0
        fi
        echo "■ make   | サーバーを作成します"
        echo "■ manage | サーバーを管理します"
        echo "■ list   | サーバーリストを表示します"
        echo "■ import | サーバーリストをインポートします"
        echo "■ export | サーバーリストを出力します"
        echo "■ remove | サーバーを削除します"
        read -p ">" input_data
        case "${input_data}" in
        make)
            echo -e "  \033[1;37m_<----^¯¯¯¯<Server List>¯¯¯¯^---->_\033[0;39m"
            echo "❘   1. OfficialServer 2. PaperServer  ❘"
            echo "❘   3. SpigotServer   4. ForgeServer  ❘"
            echo "❘   5. SpongeServer   6. BungeeCord   ❘"
            echo "❘   7. WaterFall      8. Travertine   ❘"
            mc_server_version_list
            ;;
        manage)
            word="管理するサーバー名"
            . ${VAR_LIB_FILE_LOCATIONS}server_list
            ;;
        list)
            echo "サーバー数: ${number_of_server}"
            purpose="list"
            . ${VAR_LIB_FILE_LOCATIONS}server_list
            ;;
        import)
            MC_SERVER_IMPORT
            ;;
        export)
            serverlistoutput
            ;;
        remove)
            word="削除するサーバー名"
            purpose="remove"
            . ${VAR_LIB_FILE_LOCATIONS}server_list
            ;;
        esac
    done
    ;;

#DiscordBot系
discord)
    first_start
    while :; do
        echo "Discord"
        echo "■ eew   | eewBotに関するコマンドを使用できます"
        echo "■ jmusic | JmusicBotに関するコマンドを使用できます"
        echo "■ status  | 各種Botのステータスを確認します。"
        read -p ">" input_data
        case "${input_data}" in
        eew)
            echo "Coming Soon..."
            #. ./lib/main/discord/eew.sh
            ;;
        jmusic)
            echo "Coming Soon..."
            #. ./lib/main/discord/jmusic.sh
            ;;
        esac
    done
    ;;
*)

    echo -e "\033[1;37m##========================================##\033[0;39m"
    echo "##██╗███╗   ██╗████████╗███████╗██╗       ##"
    echo "##██║████╗  ██║╚══██╔══╝██╔════╝██║       ##"
    echo "##██║██╔██╗ ██║   ██║   ███████╗██║       ##"
    echo "##██║██║╚██╗██║   ██║   ╚════██║██║       ##"
    echo "##██║██║ ╚████║   ██║   ███████║███████╗  ##"
    echo "##╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚══════╝  ##"
    echo -e "\033[1;37m##========================================##\033[0;39m"
    echo -e "\033[0;31mmain\033[1;39m: メイン機能を使用可能です"
    echo -e "   └   \033[0;31mextension\033[1;39m: 拡張機能を管理します"
    echo -e "       └   \033[0;31muse\033[1;39m: 拡張機能を使用します"
    echo -e "       └   \033[0;31mlist\033[1;39m: 拡張機能の一覧を表示します"
    echo -e "       └   \033[0;31mimport\033[1;39m: 拡張機能をインポートします"
    echo -e "       └   \033[0;31mvcheck\033[1;39m: 拡張機能の更新を確認 /更新 します"
    echo -e "       └   \033[0;31mcloud\033[1;39m: クラウドから拡張機能をダウンロードします"
    echo -e "\033[0;31mmc\033[1;39m: Minecraftに関する機能を使用可能です"
    echo -e "   └   \033[0;31mmake\033[1;39m: サーバーを作成します"
    echo -e "   └   \033[0;31mmanage\033[1;39m: サーバーを管理します"
    echo -e "   └   \033[0;31mlist\033[1;39m: サーバーリストを表示します"
    echo -e "   └   \033[0;31mexport\033[1;39m: サーバーリストを出力します"
    echo -e "   └   \033[0;31mimport\033[1;39m: サーバーリストをインポートします"
    echo -e "   └   \033[0;31mremove\033[1;39m: サーバーを削除します"
    #echo -e "\033[0;31mdiscord\033[1;39m: Discordに関する機能を開始します"
    #echo -e "   └   \033[0;31meew\033[1;39m: eewBotをスタートします"
    #echo -e "       └   \033[0;31mstart\033[1;39m: EEWBotを起動します"
    #echo -e "   └   \033[0;31mjmusic\033[1;39m: JMusiBotをスタートします"
    #echo -e "       └   \033[0;31mstart\033[1;39m: JMusicBotを起動します"
    ;;
esac

exit 0
